//
//  Copyright (c) 2018. Uber Technologies
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

import Concurrency
import Foundation
import XCTest
@testable import NeedleFramework

class DependencyGraphExporterTests: AbstractGeneratorTests {

    let fixturesURL = URL(fileURLWithPath: #file).deletingLastPathComponent().deletingLastPathComponent().appendingPathComponent("Fixtures/")
    let outputURL = FileManager.default.temporaryDirectory.appendingPathComponent("generated.swift")

    override func setUp() {
        let created = FileManager.default.createFile(atPath: outputURL.path, contents: nil, attributes: nil)
        XCTAssert(created)
    }

    override func tearDown() {
        try? FileManager.default.removeItem(atPath: outputURL.path)
    }

    @available(OSX 10.12, *)
    func test_export_verifyContent() throws {
        let (components, imports) = sampleProjectParsed()
        let executor = MockSequenceExecutor()
        let exporter = DependencyGraphExporter()

        let headerDocPath = fixturesURL.appendingPathComponent("HeaderDoc.txt").path
        try exporter.export(components, with: imports, to: outputURL.path, using: executor, withTimeout: 10, include: headerDocPath)
        let generated = try String(contentsOf: outputURL)
        XCTAssertNotNil(generated, "Could not read the generated file")

        XCTAssertTrue(generated.contains("//\n//  Copyright Â© Uber Technologies, Inc. All rights reserved.\n//\n//  @generated by Needle\n//  swiftlint:disable custom_rules"))
        XCTAssertTrue(generated.contains("import NeedleFoundation"))
        XCTAssertTrue(generated.contains("import RxSwift"))
        XCTAssertTrue(generated.contains("import UIKit"))
        XCTAssertTrue(generated.contains("// MARK: - Registration"))
        XCTAssertTrue(generated.contains("""
    registerProviderFactory(\"^->RootComponent->LoggedInComponent->GameComponent\", factorycf9c02c4def4e3d508816cd03d3cf415b70dfb0e)
"""))
        XCTAssertTrue(generated.contains("""
    registerProviderFactory(\"^->RootComponent->LoggedInComponent->GameComponent->ScoreSheetComponent\", factory3f7d60e2119708f293bac0d8c882e1e0d9b5eda1)
"""))
        XCTAssertTrue(generated.contains("""
    registerProviderFactory(\"^->RootComponent->LoggedInComponent->ScoreSheetComponent\", factory3f7d60e2119708f293ba0b20504d5a9e5588d7b3)
"""))
        XCTAssertTrue(generated.contains("""
    registerProviderFactory(\"^->RootComponent->LoggedOutComponent\", factory1434ff4463106e5c4f1bb3a8f24c1d289f2c0f2e)
"""))
        XCTAssertTrue(generated.contains("""
    registerProviderFactory(\"^->RootComponent->LoggedInComponent\", factoryEmptyDependencyProvider)
"""))
        XCTAssertTrue(generated.contains("""
    registerProviderFactory(\"^->RootComponent\", factoryEmptyDependencyProvider)
"""))
        XCTAssertTrue(generated.contains("// MARK: - Traversal Helpers"))
        XCTAssertTrue(generated.contains("""
private func parent1(_ component: NeedleFoundation.Scope) -> NeedleFoundation.Scope {
    return component.parent
}
"""))
        XCTAssertTrue(generated.contains("""
private func parent2(_ component: NeedleFoundation.Scope) -> NeedleFoundation.Scope {
    return component.parent.parent
}
"""))
        XCTAssertFalse(generated.contains("private func parent3(_ component: NeedleFoundation.Scope) -> NeedleFoundation.Scope {"))
        XCTAssertTrue(generated.contains("// MARK: - Providers"))
        XCTAssertTrue(generated.contains("""
private class GameDependency1ab5926a977f706d3195Provider: GameDependency {
    var mutableScoreStream: MutableScoreStream {
        return loggedInComponent.mutableScoreStream
    }
    var playersStream: PlayersStream {
        return rootComponent.playersStream
    }
    private let loggedInComponent: LoggedInComponent
    private let rootComponent: RootComponent
"""))
        XCTAssertTrue(generated.contains("""
/// ^->RootComponent->LoggedInComponent->GameComponent
private func factorycf9c02c4def4e3d508816cd03d3cf415b70dfb0e(_ component: NeedleFoundation.Scope) -> AnyObject {
    return GameDependency1ab5926a977f706d3195Provider(loggedInComponent: parent1(component) as! LoggedInComponent, rootComponent: parent2(component) as! RootComponent)
}
"""))
        XCTAssertTrue(generated.contains("""
private class ScoreSheetDependency97f2595a691a56781aaaProvider: ScoreSheetDependency {
    var scoreStream: ScoreStream {
        return loggedInComponent.scoreStream
    }
    private let loggedInComponent: LoggedInComponent
"""))
        XCTAssertTrue(generated.contains("""
/// ^->RootComponent->LoggedInComponent->GameComponent->ScoreSheetComponent
private func factory3f7d60e2119708f293bac0d8c882e1e0d9b5eda1(_ component: NeedleFoundation.Scope) -> AnyObject {
    return ScoreSheetDependency97f2595a691a56781aaaProvider(loggedInComponent: parent2(component) as! LoggedInComponent)
}
"""))
        XCTAssertTrue(generated.contains("""
/// ^->RootComponent->LoggedInComponent->ScoreSheetComponent
private func factory3f7d60e2119708f293ba0b20504d5a9e5588d7b3(_ component: NeedleFoundation.Scope) -> AnyObject {
    return ScoreSheetDependency97f2595a691a56781aaaProvider(loggedInComponent: parent1(component) as! LoggedInComponent)
}
"""))
        XCTAssertTrue(generated.contains("""
/// ^->RootComponent->LoggedOutComponent
private func factory1434ff4463106e5c4f1bb3a8f24c1d289f2c0f2e(_ component: NeedleFoundation.Scope) -> AnyObject {
    return LoggedOutDependencyacada53ea78d270efa2fProvider(rootComponent: parent1(component) as! RootComponent)
}
"""))
    }

    @available(OSX 10.12, *)
    func test_export_verifyFileWriteBehavior() throws {
        let (components, imports) = sampleProjectParsed()
        let executor = MockSequenceExecutor()
        let exporter = DependencyGraphExporter()
        let headerDocPath = fixturesURL.appendingPathComponent("HeaderDoc.txt").path

        try exporter.export(components, with: imports, to: outputURL.path, using: executor, withTimeout: 10, include: headerDocPath)
        let generated = try String(contentsOf: outputURL)

        XCTAssertNotNil(generated, "Could not read the generated file")

        let expectedAttributes = try FileManager.default.attributesOfItem(atPath: outputURL.path)
        let expectedCreationDate = (expectedAttributes[.creationDate] as! Date).timeIntervalSinceReferenceDate
        let expectedModificationDate = (expectedAttributes[.modificationDate] as! Date).timeIntervalSinceReferenceDate

        try exporter.export(components, with: imports, to: outputURL.path, using: executor, withTimeout: 10, include: headerDocPath)

        let attributes = try FileManager.default.attributesOfItem(atPath: outputURL.path)
        let creationDate = (attributes[.creationDate] as! Date).timeIntervalSinceReferenceDate
        let modificationDate = (attributes[.modificationDate] as! Date).timeIntervalSinceReferenceDate

        XCTAssertEqual(creationDate, expectedCreationDate)
        XCTAssertEqual(modificationDate, expectedModificationDate)
    }
}
